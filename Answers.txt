## General Questions

* What did you learn yesterday/this week?
Did some Bootstrap review yesterday. I also learned about Video.JS as well as rails auth.

* What excites or interests you about coding?
The fact that I can build things that interest me and that it will provide me with a better career trajectory

* What is a recent technical challenge you experienced and how did you solve it?
I had many syntax issues with a ruby app that was preventing it from showing up on the page. I went through and trouble-shooted each of these issues, one at a time.

* What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?
I start with the user and work my way backwards. I try to take the users needs into account when designing the layout and flow of the site.  

* Talk about your preferred development environment.
Quiet with minimal distractions.

* Which version control systems are you familiar with?
Github

* Can you describe your workflow when you create a web page?
I start with the users needs first, then build out the framework of the site, then do a good majority of the styling, then write the functionality and then tie it all together.

* If you have 5 different stylesheets, how would you best integrate them into the site?
Inline stylesheets?

* Can you describe the difference between progressive enhancement and graceful degradation?
Graceful degradation Providing an alternative version of your functionality or making the user aware of shortcomings of a product as a safety measure to ensure that the product is usable. Progressive enhancement Starting with a baseline of usable functionality, then increasing the richness of the user experience step by step by testing for support for enhancements before applying them. 

* Describe how you would create a simple slideshow page, without any frameworks (HTML/CSS/JS only).
Set the images in divs and then write javascript functions to change the images on a timer

* If you could master one technology this year, what would it be?
To the alpha and the omega of front-end tech (HTML, CSS & JS)

* Explain the importance of standards and standards bodies.
It establishes international standards for software development. This allows code written in one country to run in another.

==============================

## HTML Questions

* What does a `doctype` do?
It is an instruction to the web browser about what version of the markup language the page is written in

* What's the difference between HTML and XHTML?
A doctype declaration is mandatory with XHTML. 

* What are `data-` attributes good for?
Storing information that doesn't have a visual representation

* Describe the difference between a `cookie`, `sessionStorage` and `localStorage`.
Sessions are stored in the server, cookies are stored in the browser.

* Why is it generally a good idea to position CSS `<link>`s between `<head></head>` and JS `<script>`s just before `</body>`? Do you know any exceptions?
Because of sequential loading

================================

## CSS Questions

* What is the difference between classes and IDs in CSS?
There can be multiple classes but only 1 ID

* What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
Normalize.css preserves useful defaults rather than "unstyling" everything.

* Describe Floats and how they work.
The float CSS property specifies that an element should be taken from the normal flow and placed along the left or right side of its container, where text and inline elements will wrap around it.

* Describe z-index and how stacking context is formed.
The z-index is a depth axis that determines which elements are in the forefront of the screen

* Have you ever used a grid system, and if so, what do you prefer?
No

* Have you used or implemented media queries or mobile specific layouts/CSS?
No

* How do you optimize your webpages for print?
Create a separate style sheet for print

* What are the advantages/disadvantages of using CSS preprocessors?
Pros: less redundancy, reusable code Cons: entire team has to use the same language, requires additional steps to make updates/changes

* Describe what you like and dislike about the CSS preprocessors you have used.
I haven't used any preprocessors

* How would you implement a web design comp that uses non-standard fonts?
By using "font-face" and including the link

* Explain how a browser determines what elements match a CSS selector.
By class or ID

* Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box 
models.
It's a box that wraps around every element on a page

* What does ```* { box-sizing: border-box; }``` do? What are its advantages?
The box-sizing CSS property is used to alter the default CSS box model used to calculate widths and heights of elements. It is possible to use this property to emulate the behavior of browsers that do not correctly support the CSS box model specification.

* List as many values for the display property that you can remember.
Inline, block, inline-block, flex, inherit, absolute, fixed

* What's the difference between inline and inline-block?
Elements with display:inline-block elements are like display:inline elements, but they can have a width and height. So you can use an inline-block element as a block while flowing it within text.

* What's the difference between a relative, fixed, absolute and statically positioned element?
Static elements are not affected by other properties, relative is relative to its normal position, fixed stays in the same place despite scrolling, absolute is positioned relative to the closest positioned element

* The 'C' in CSS stands for Cascading.  How is priority determined in assigning styles (a few examples)?  How can you use this system to your advantage?
It's sequential, so write the most important code first because it will be executed first

* What existing CSS frameworks have you used locally, or in production? How would you change/improve them?
Bootstrap

* Have you played around with the new CSS Flexbox or Grid specs?
No

* Have you ever worked with retina graphics? If so, when and what techniques did you use?
No

* Explain some of the pros and cons for CSS animations versus JavaScript animations.
CSS is better for smaller animations, JS is gives more control over animations

==============================

## JS Questions

* Explain event delegation
Event delegation allows you to avoid adding event listeners to specific nodes;  instead, the event listener is added to one parent.  That event listener analyzes bubbled events to find a match on child elements.

* Explain how `this` works in JavaScript
It's used to refer to an object

* Explain how prototypal inheritance works
An object inherits from another object instead of a class

* Why is it called a Ternary expression, what does the word "Ternary" indicate?
JS operator used as a shortcut for the if statement

* What's the difference between a variable that is: `null`, `undefined` or `undeclared`?
Undefined is a variable that hasn't been declared, null is a special object, undefined is a variable with no value

  * How would you go about checking for any of these states?
Call it

* What is a closure, and how/why would you use one?
It's a self-invoking function & it allows a function to have private variables

* What's a typical use case for anonymous functions?


* Difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?


* What's the difference between `.call` and `.apply`?
* Explain `Function.prototype.bind`.
* What's the difference between feature detection, feature inference, and using the User Agent string?
* Explain AJAX in as much detail as possible.
* Have you ever used JavaScript templating?
  * If so, what libraries have you used?
* Explain "hoisting".
* Describe event bubbling.
* What's the difference between an "attribute" and a "property"?
* Why is extending built-in JavaScript objects not a good idea?
* What is the difference between `==` and `===`?
* Explain the same-origin policy with regards to JavaScript.
* What is the extent of your experience with Promises and/or their polyfills?
* What are the pros and cons of using Promises instead of callbacks?
* What tools and techniques do you use debugging Javascript code?
* What language constructions do you use for iterating over object properties and array items?

=============================

Database Questions

Design a database schema for Facebook, with at least 4 models, a complete set of attributes for each model, a 1:M association, and a M:M association.

============================

Ruby/Rails

What are ruby gems?
A module you can add in for additional functionality

What is the difference between a symbol and a string?
We use symbols in hash maps. Symbols all reference one single value, but there may be many instances of strings

What is the difference between a class method and an instance method?
Class method exists once for all instances of the class. Instance methods acts only for individual instances

What is the difference between local variables, instance variables, and class variables?
Local variables aren't associated with any classes. Instances variables are attached to instances of classes. 
Class variables exist once per class

What is a range?
A specific set of numbers or values

In ruby, what does attr_accessor do?
Allows a method to access an attribute

What is the purpose of environment files under the config folder in Rails? (development, test, production)
What is the purpose of the application.rb file in Rails?
How can you define a constant?

What is the purpose of yield?
Used when we create layout template, fills in the rest of the site

How do you store API keys when creating an app?
Put them in a .env file then add it to gitignore

How do I send parameters through a url?

Explain MVC
Model View Controller
Model sets up db structure
View defines how things are displayed
Controller controls interaction between model and the view

What is a before_action? When would you use it?

What do controllers do in rails?
Allow us to configure routes & can be paired with CRUD methods

What is RESTful routing?
Standard convention that serves as a guide to create CRUD routes

What is a polymorphic association?
One db table that you want to use for many things

What are params?
How do I make a migration to add a column in Rails?
What is CSRF? How does Rails protect an app against this?
Cross Site Request Forgery. RoR puts CSRF tokens into forms & checks for those tokens

What's the difference between User.find_by_id(1) and User.find(1)?
find by id1 is guaranteed to return the user with id1
find1 returns one user, but no guarantee who the user is

What's are classes in Ruby? What are modules? And what's the difference?
Modules are self-contained pieces of code that you can export/import

=============================

Testing Questions

What are some advantages/disadvantages to testing your code?
Writing tests sucks, trap of writing code that just passes tests but isn't functional
Can be more certain your app works, a good test suite tests validity of incoming code

What tools would you use to test your code's functionality?
Manual testing, automated testing, unit tests,

What is the difference between a unit test and a functional/integration test?

What is the purpose of a code style linting tool?
Program that checks code for stylistic errors

What is End-to-end (E2E) testing? How can it be implemented in frameworks like Angular and Rails?
Refers to testing things all the way from the client end to the server end. Angular has it's own E2E framework

=============================

Coding Questions:

Question: What is the value of foo?

var foo = 10 + '20';
Question: How would you make this work?

add(2, 5); // 7
add(2)(5); // 7
Question: What value is returned from the following statement?

"i'm a lasagna hog".split("").reverse().join("");
Question: What is the outcome of the two alerts below?

var foo = "Hello";
(function() {
  var bar = " World";
  alert(foo + bar);
})();
alert(foo + bar);
Question: What is the value of foo.length?

var foo = [];
foo.push(1);
foo.push(2);
Question: What is the value of foo.x?

var foo = {n: 1};
var bar = foo;
foo.x = foo = {n: 2};
Question: What does the following code print?

console.log('one');
setTimeout(function() {
  console.log('two');
}, 0);
console.log('three');
Fun Questions:

What's a cool project that you've recently worked on?
What are some things you like about the developer tools you use?
Do you have any pet projects? What kind?
How do you like your coffee?