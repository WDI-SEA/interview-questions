# General Questions

# What did you learn yesterday/this week?
  I learned how to manipulate the "magic" of rails to gain much more control of the behavior of my code.
# What excites or interests you about coding?
  I love puzzles, building things, and solving problems. For years I have been involved with the how and why of software development, but I now, understanding the how, I can be far more effective in all aspects of solving problems.
# What is a recent technical challenge you experienced and how did you solve it?
  I recently took on a brand new libray and functionality for one of my projects, and had to walk through the entire experience on my own by applying my knowledge in new ways, reading documentation, and searching the web for examples.
# What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?
  As a business owner and product manager, my job was to consider the user side of the UI, performance, security, etc., so those considerations are always top of mind as I now look at them from the technology perspective.
# Talk about your preferred development environment.
# Which version control systems are you familiar with?
  Git and github
# Can you describe your workflow when you create a web page?
  I follow a few basic steps:
    - Understand the requirements and desired outcome.
    - Make tech/stack decisions
    - Set key development milestones
    - Build, test, review, repeat
# If you have 5 different stylesheets, how would you best integrate them into the site?
# Can you describe the difference between progressive enhancement and graceful degradation?
  Progressive enhancement is the process of building a website for the oldest/least capable browsers, but contains features available to more capable browsers. Graceful degredation is the process of building a website for modern browsers that gracefully handles less-capable browsers with reduced features and functionality.
# Describe how you would create a simple slideshow page, without any frameworks (HTML/CSS/JS only).
  I would create a container to display the slides, including all of the images to be used in the slideshow with one active and the others hidden. Using Javascript and/or jquery, I would create interactive buttons with click handlers to update the container with the next or previous image by making the current image hidden and the desired image to active. 
# If you could master one technology this year, what would it be?
  Full-stack Javascript
# Explain the importance of standards and standards bodies.
  Uniformity, readability, and compatibility are all important to make applications extensible and efficient.

# HTML Questions

# What does a doctype do?
  Tells the browser what kind of document the page contains, so the browser can render it properly.
# What's the difference between HTML and XHTML?
  XHTML follows XML standards.
# What are data- attributes good for?
# Describe the difference between a cookie, sessionStorage and localStorage.
  A cookie is an older persistent configuration storage for a website on a users browser, sessionStorage is server-side storage for a designated period of time, and localStorage is data storage on a client browser.
# Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?
  To ensure pages are loaded with desired styling before fully rendering, to avoid unwanted page reconfiguration in the users browser.


# CSS Questions

# What is the difference between classes and IDs in CSS?
  An ID is a unique identifier for a specific element, while a class is used to identify a group of similar or like elements.
# What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
  Reset completely overrides all default stylings, whereas normalizing preserves many useful defaults.
# Describe Floats and how they work.
  Floats cause elements to move to one side of the page or the other, "stacking" them against each other against edge of the container.
# Describe z-index and how stacking context is formed.
  z-index represents the depth of elements on the page, allowing the developer to force elements on top of or underneath other elements.
# Have you ever used a grid system, and if so, what do you prefer?
  I have worked predominantly with Bootstrap, though have looked into Foundation as well. I prefer to work with a grid system to easily enforce responsiveness in web projects.
# Have you used or implemented media queries or mobile specific layouts/CSS?
  I have spent some time working with media queries, both in modifying existing Bootstrap standards and creating responsive behavior from scratch.
# How do you optimize your webpages for print?

# What are the advantages/disadvantages of using CSS preprocessors?
# Describe what you like and dislike about the CSS preprocessors you have used.
  Things we gain:
    - variables
    - nested query syntax allows for writing less code

  Things we hate:
    - harder to debug (the compiled code can be hard to read)
    - the compiled code isnt the original code
    - preprocessors add extra step to workflow
    - requires a learning overhead to project

# How would you implement a web design comp that uses non-standard fonts?
  Have default (font-family) font(s) as fall-back for browsers that cannot render the non-standard font.
# Explain how a browser determines what elements match a CSS selector.
# Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.
  Margin, border, padding, content. The display property allows us to set elements to be block, inline-block or inline, which describes how the boxes should sit next to one another.
# What does * { box-sizing: border-box; } do? What are its advantages?
  Border-box sets the size of the box as the border size, and padding is built inward from the border. Content-box sets the size of the box as the content and padding is built outward from the content.
# List as many values for the display property that you can remember.
  Block, inline-block, inline, none, grid, table
# What's the difference between inline and inline-block?
  Inline does not respect top & bottom margins/padding, and cannot have height or width. Inline-block respects all margins/padding and can have height or width.
# What's the difference between a relative, fixed, absolute and statically positioned element?

# The 'C' in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?
  The order of importance for styles goes from most specific to most generic: element Id, elements within Id (#ul li), element class, elements within class (.ul li), elements within elements (ul li), generic element (li)
# What existing CSS frameworks have you used locally, or in production? How would you change/improve them?

# Have you played around with the new CSS Flexbox or Grid specs?
# Have you ever worked with retina graphics? If so, when and what techniques did you use?
# Explain some of the pros and cons for CSS animations versus JavaScript animations.
  Built in CSS animations are more efficient and use the graphics hardware, but may be limited or constraining. 


# JS Questions

# Explain event delegation
# Explain how 'this' works in JavaScript
  'this' is a defined context that refers to a class or function.
# Explain how prototypal inheritance works
# Why is it called a Ternary expression, what does the word "Ternary" indicate?
  A statement that contains three arguments, and evaluates like a basic if/else statement.
# What's the difference between a variable that is: null, undefined or undeclared?
  Null is a value that is set, undefined is returned from a program, and undeclared is a variable that has not be instantiated anywhere within the scope.
# How would you go about checking for any of these states?
# What is a closure, and how/why would you use one?

# What's a typical use case for anonymous functions?
  A function to be executed immediately as it is encountered by the function at runtime, and only called in a single use context.
# Difference between: function Person(){}, var person = Person(), and var person = new Person()?
# What's the difference between .call and .apply?
# Explain Function.prototype.bind.
# What's the difference between feature detection, feature inference, and using the User Agent string?
# Explain AJAX in as much detail as possible.
# Have you ever used JavaScript templating?
# If so, what libraries have you used?
# Explain "hoisting".
  Javascript will pull all declared variables to the top of a function, including accessible variables declared outside of the current function.
# Describe event bubbling.
# What's the difference between an "attribute" and a "property"?
# Why is extending built-in JavaScript objects not a good idea?
# What is the difference between == and ===?
# Explain the same-origin policy with regards to JavaScript.
# What is the extent of your experience with Promises and/or their polyfills?
# What are the pros and cons of using Promises instead of callbacks?
# What tools and techniques do you use debugging Javascript code?
# What language constructions do you use for iterating over object properties and array items?
  Loops: for, while, do while
    Arrays: .map, .filter, .reduce, .forEach functions
    Objects: for in loops
# Database Questions

# Design a database schema for Facebook, with at least 4 models, a complete set of attributes for each model, a 1:M association, and a M:M association.


# Ruby/Rails

# What are ruby gems?
# What is the difference between a symbol and a string?
# What is the difference between a class method and an instance method?
# What is the difference between local variables, instance variables, and class variables?
# What is a range?
# In ruby, what does attr_accessor do?
# What is the purpose of environment files under the config folder in Rails? (development, test, production)
# What is the purpose of the application.rb file in Rails?
# How can you define a constant?
# What is the purpose of yield?
# How do you store API keys when creating an app?
# How do I send parameters through a url?
# Explain MVC
# What is a before_action? When would you use it?
# What do controllers do in rails?
# What is RESTful routing?
# What is a polymorphic association?
# What are params?
# How do I make a migration to add a column in Rails?
# What is CSRF? How does Rails protect an app against this?
# What's the difference between User.find_by_id(1) and User.find(1)?
# What's are classes in Ruby? What are modules? And what's the difference?


# Testing Questions

# What are some advantages/disadvantages to testing your code?
# What tools would you use to test your code's functionality?
# What is the difference between a unit test and a functional/integration test?
# What is the purpose of a code style linting tool?
# What is End-to-end (E2E) testing? How can it be implemented in frameworks like Angular and Rails?
# Coding Questions:

# Question: What is the value of foo?
# var foo = 10 + '20';
  foo === 30

# Question: How would you make this work?
# add(2, 5); // 7
# add(2)(5); // 7

# Question: What value is returned from the following statement?
# "i'm a lasagna hog".split("").reverse().join("");
"goh angasal a m'I"

# Question: What is the outcome of the two alerts below?
# var foo = "Hello";
# (function() {
#   var bar = " World";
#   alert(foo + bar);
# })();
# alert(foo + bar);
"Hello World"
"Hello" => bar is undefined

# Question: What is the value of foo.length?
# var foo = [];
# foo.push(1);
# foo.push(2);
  2

# Question: What is the value of foo.x?
# var foo = {n: 1};
# var bar = foo;
# foo.x = foo = {n: 2};
  

# Question: What does the following code print?
# console.log('one');
# setTimeout(function() {
#   console.log('two');
# }, 0);
# console.log('three');
one
two
three

# Fun Questions:

# What's a cool project that you've recently worked on?
# What are some things you like about the developer tools you use?
# Do you have any pet projects? What kind?
# How do you like your coffee?
#   I do not like coffee.